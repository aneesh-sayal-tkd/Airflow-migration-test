# name: Trigger Harness Pipeline on PR

# on:
#   pull_request:
#     types: [opened, synchronize, reopened]
#     branches: [test, prod]

# permissions:
#   contents: read
#   pull-requests: write
#   issues: write

# jobs:
#   trigger-harness-pipeline:
#     runs-on: ubuntu-latest
#     if: |
#       (github.event.pull_request.head.ref == 'dev' && github.event.pull_request.base.ref == 'test') ||
#       (github.event.pull_request.head.ref == 'test' && github.event.pull_request.base.ref == 'prod')
    
#     steps:
#       - name: Determine Migration Type
#         id: migration-config
#         run: |
#           if [[ "${{ github.event.pull_request.head.ref }}" == "dev" && "${{ github.event.pull_request.base.ref }}" == "test" ]]; then
#             echo "migration_type=dev-to-test" >> $GITHUB_OUTPUT
#             echo "mwaa_env=${{ vars.TEST_MWAA }}" >> $GITHUB_OUTPUT
#           elif [[ "${{ github.event.pull_request.head.ref }}" == "test" && "${{ github.event.pull_request.base.ref }}" == "prod" ]]; then
#             echo "migration_type=test-to-prod" >> $GITHUB_OUTPUT
#             echo "mwaa_env=${{ vars.PROD_MWAA_ENV }}" >> $GITHUB_OUTPUT
#           fi

#       - name: Trigger Harness Pipeline
#         run: |
#           echo "üöÄ Triggering Harness pipeline for ${{ steps.migration-config.outputs.migration_type }}"
#           echo "üë§ Triggered by: ${{ github.actor }}"
          
#           curl -X POST "${{ secrets.HARNESS_WEBHOOK_URL }}" \
#             -H "Content-Type: application/json" \
#             -d '{
#               "repository": "${{ github.repository }}",
#               "pr_number": ${{ github.event.number }},
#               "pr_title": "${{ github.event.pull_request.title }}",
#               "migration_type": "${{ steps.migration-config.outputs.migration_type }}",
#               "mwaa_environment": "${{ steps.migration-config.outputs.mwaa_env }}",
#               "triggered_by": "${{ github.actor }}",
#               "github_user": "${{ github.actor }}",
#               "commit_sha": "${{ github.event.pull_request.head.sha }}",
#               "source_branch": "${{ github.event.pull_request.head.ref }}",
#               "target_branch": "${{ github.event.pull_request.base.ref }}"
#             }'

#       - name: Comment on PR
#         run: |
#           curl -X POST \
#             -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
#             -H "Content-Type: application/json" \
#             https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
#             -d '{
#               "body": "üöÄ **Harness Pipeline Triggered**\n\n**Migration:** `${{ steps.migration-config.outputs.migration_type }}`\n**MWAA Environment:** `${{ steps.migration-config.outputs.mwaa_env }}`\n**Triggered by:** @${{ github.actor }}"
#             }' \
#             --fail-with-body || echo "Comment failed but pipeline triggered"

# name: Trigger Harness Pipeline on PR

# on:
#   pull_request:
#     types: [opened, synchronize, reopened]
#     branches: [test, prod]

# permissions:
#   contents: read
#   pull-requests: write
#   issues: write

# jobs:
#   trigger-harness-pipeline:
#     runs-on: ubuntu-latest
#     if: |
#       (github.event.pull_request.head.ref == 'dev' && github.event.pull_request.base.ref == 'test') ||
#       (github.event.pull_request.head.ref == 'test' && github.event.pull_request.base.ref == 'prod')
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}

#       - name: Determine Migration Type
#         id: migration-config
#         run: |
#           if [[ "${{ github.event.pull_request.head.ref }}" == "dev" && "${{ github.event.pull_request.base.ref }}" == "test" ]]; then
#             echo "migration_type=dev-to-test" >> $GITHUB_OUTPUT
#             echo "mwaa_env=${{ vars.TEST_MWAA }}" >> $GITHUB_OUTPUT
#             echo "expected_duration=480" >> $GITHUB_OUTPUT  # 8 minutes
#           elif [[ "${{ github.event.pull_request.head.ref }}" == "test" && "${{ github.event.pull_request.base.ref }}" == "prod" ]]; then
#             echo "migration_type=test-to-prod" >> $GITHUB_OUTPUT
#             echo "mwaa_env=${{ vars.PROD_MWAA_ENV }}" >> $GITHUB_OUTPUT
#             echo "expected_duration=600" >> $GITHUB_OUTPUT  # 10 minutes
#           fi

#       - name: Trigger Harness Pipeline
#         id: trigger-pipeline
#         run: |
#           echo "üöÄ Triggering Harness pipeline for ${{ steps.migration-config.outputs.migration_type }}"
#           echo "üë§ Triggered by: ${{ github.actor }}"
          
#           # Add unique tracking identifier
#           tracking_id="gh-${{ github.run_id }}-${{ github.run_attempt }}"
          
#           response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST "${{ secrets.HARNESS_WEBHOOK_URL }}" \
#             -H "Content-Type: application/json" \
#             -d "{
#               \"repository\": \"${{ github.repository }}\",
#               \"pr_number\": ${{ github.event.number }},
#               \"pr_title\": \"${{ github.event.pull_request.title }}\",
#               \"migration_type\": \"${{ steps.migration-config.outputs.migration_type }}\",
#               \"mwaa_environment\": \"${{ steps.migration-config.outputs.mwaa_env }}\",
#               \"triggered_by\": \"${{ github.actor }}\",
#               \"github_user\": \"${{ github.actor }}\",
#               \"commit_sha\": \"${{ github.event.pull_request.head.sha }}\",
#               \"source_branch\": \"${{ github.event.pull_request.head.ref }}\",
#               \"target_branch\": \"${{ github.event.pull_request.base.ref }}\",
#               \"github_run_id\": \"${{ github.run_id }}\",
#               \"tracking_id\": \"$tracking_id\"
#             }")
          
#           # Extract HTTP status and response body
#           http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
#           response_body=$(echo "$response" | sed '/HTTP_STATUS:/d')
          
#           echo "HTTP Status: $http_status"
#           echo "Harness response: $response_body"
          
#           # Check if webhook call was successful
#           if [[ "$http_status" -ge 400 ]]; then
#             echo "‚ùå Webhook call failed with status $http_status"
#             echo "trigger_status=failed" >> $GITHUB_OUTPUT
#             echo "failure_reason=Webhook call failed with HTTP status $http_status" >> $GITHUB_OUTPUT
#             exit 1
#           fi
          
#           # Extract response details
#           webhook_status=$(echo "$response_body" | jq -r '.status // "UNKNOWN"')
#           ui_url=$(echo "$response_body" | jq -r '.data.uiUrl // .uiUrl // empty')
          
#           if [[ "$webhook_status" == "SUCCESS" ]]; then
#             echo "‚úÖ Harness webhook returned SUCCESS status"
#             echo "trigger_status=success" >> $GITHUB_OUTPUT
#           else
#             echo "‚ùå Harness webhook returned non-SUCCESS status: $webhook_status"
#             echo "trigger_status=failed" >> $GITHUB_OUTPUT
#             echo "failure_reason=Webhook returned status: $webhook_status" >> $GITHUB_OUTPUT
#           fi
          
#           echo "ui_url=$ui_url" >> $GITHUB_OUTPUT
#           echo "tracking_id=$tracking_id" >> $GITHUB_OUTPUT
#           echo "webhook_status=$webhook_status" >> $GITHUB_OUTPUT

#       - name: Comment on PR - Pipeline Triggered
#         if: steps.trigger-pipeline.outputs.trigger_status == 'success'
#         run: |
#           ui_url_text=""
#           if [[ -n "${{ steps.trigger-pipeline.outputs.ui_url }}" && "${{ steps.trigger-pipeline.outputs.ui_url }}" != "null" ]]; then
#             ui_url_text="\n**Pipeline URL:** [${{ steps.trigger-pipeline.outputs.ui_url }}](${{ steps.trigger-pipeline.outputs.ui_url }})"
#           fi
          
#           duration_minutes=$((${{ steps.migration-config.outputs.expected_duration }} / 60))
          
#           curl -X POST \
#             -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
#             -H "Content-Type: application/json" \
#             https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
#             -d "{
#               \"body\": \"üöÄ **Harness Pipeline Triggered Successfully**\n\n**Migration:** \`${{ steps.migration-config.outputs.migration_type }}\`\n**MWAA Environment:** \`${{ steps.migration-config.outputs.mwaa_env }}\`\n**Triggered by:** @${{ github.actor }}\n**Tracking ID:** \`${{ steps.trigger-pipeline.outputs.tracking_id }}\`\n**Webhook Status:** \`${{ steps.trigger-pipeline.outputs.webhook_status }}\`$ui_url_text\n\n‚è≥ Pipeline is running. Estimated completion time: **${duration_minutes} minutes**\n\n*Will automatically proceed with merge upon completion.*\"
#             }"

#       - name: Wait for Pipeline Completion
#         if: steps.trigger-pipeline.outputs.trigger_status == 'success'
#         id: wait-completion
#         run: |
#           duration=${{ steps.migration-config.outputs.expected_duration }}
#           duration_minutes=$((duration / 60))
          
#           echo "‚è≥ Waiting for pipeline completion..."
#           echo "Estimated duration: $duration_minutes minutes ($duration seconds)"
          
#           # Progress updates every 2 minutes
#           update_interval=120
#           updates_count=$((duration / update_interval))
          
#           for ((i=1; i<=updates_count; i++)); do
#             elapsed=$((i * update_interval))
#             elapsed_minutes=$((elapsed / 60))
#             remaining=$((duration - elapsed))
#             remaining_minutes=$((remaining / 60))
            
#             echo "Progress: ${elapsed_minutes}/${duration_minutes} minutes elapsed, ~${remaining_minutes} minutes remaining"
            
#             if [[ $remaining -gt 0 ]]; then
#               sleep $update_interval
#             fi
#           done
          
#           # Sleep any remaining time
#           remaining=$((duration % update_interval))
#           if [[ $remaining -gt 0 ]]; then
#             echo "Sleeping final $remaining seconds..."
#             sleep $remaining
#           fi
          
#           echo "‚úÖ Wait period completed - assuming pipeline finished successfully"
#           echo "status=completed" >> $GITHUB_OUTPUT

#       - name: Comment on PR - Pipeline Completed
#         if: steps.wait-completion.outputs.status == 'completed'
#         run: |
#           ui_url_text=""
#           if [[ -n "${{ steps.trigger-pipeline.outputs.ui_url }}" && "${{ steps.trigger-pipeline.outputs.ui_url }}" != "null" ]]; then
#             ui_url_text="\n**Pipeline URL:** [${{ steps.trigger-pipeline.outputs.ui_url }}](${{ steps.trigger-pipeline.outputs.ui_url }})"
#           fi
          
#           curl -X POST \
#             -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
#             -H "Content-Type: application/json" \
#             https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
#             -d "{
#               \"body\": \"‚úÖ **Harness Pipeline Completed Successfully**\n\n**Migration:** \`${{ steps.migration-config.outputs.migration_type }}\`\n**Tracking ID:** \`${{ steps.trigger-pipeline.outputs.tracking_id }}\`$ui_url_text\n\nüéâ Pipeline execution completed! Proceeding with automatic merge...\"
#             }"

#       - name: Merge Pull Request
#         if: steps.wait-completion.outputs.status == 'completed'
#         run: |
#           echo "üîÄ Automatically merging PR after successful pipeline execution"
          
#           merge_response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X PUT \
#             -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
#             -H "Content-Type: application/json" \
#             https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}/merge \
#             -d '{
#               "commit_title": "Merge PR #${{ github.event.number }}: ${{ github.event.pull_request.title }}",
#               "commit_message": "Automatically merged after successful Harness pipeline execution\n\nTracking ID: ${{ steps.trigger-pipeline.outputs.tracking_id }}\nMigration: ${{ steps.migration-config.outputs.migration_type }}",
#               "merge_method": "merge"
#             }')
          
#           merge_status=$(echo "$merge_response" | grep "HTTP_STATUS:" | cut -d: -f2)
          
#           if [[ "$merge_status" -eq 200 ]]; then
#             echo "‚úÖ PR merged successfully"
#             curl -X POST \
#               -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
#               -H "Content-Type: application/json" \
#               https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
#               -d '{
#                 "body": "üéâ **PR Merged Successfully**\n\nThe pull request has been automatically merged after successful pipeline execution."
#               }'
#           else
#             echo "‚ùå Failed to merge PR automatically (status: $merge_status)"
#             curl -X POST \
#               -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
#               -H "Content-Type: application/json" \
#               https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
#               -d '{
#                 "body": "‚ö†Ô∏è **Auto-merge Failed**\n\nThe Harness pipeline completed successfully, but automatic merge failed. Please merge manually.\n\n**Possible reasons:**\n- Branch protection rules require reviews\n- Merge conflicts exist\n- PR is not in mergeable state"
#               }'
#           fi

#       - name: Comment on PR - Pipeline Trigger Failed
#         if: steps.trigger-pipeline.outputs.trigger_status == 'failed'
#         run: |
#           curl -X POST \
#             -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
#             -H "Content-Type: application/json" \
#             https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
#             -d '{
#               "body": "‚ùå **Failed to Trigger Harness Pipeline**\n\n**Migration:** `${{ steps.migration-config.outputs.migration_type }}`\n**Error:** ${{ steps.trigger-pipeline.outputs.failure_reason }}\n\n‚ùó Please check the webhook configuration and pipeline setup before retrying."
#             }'

# name: Branch Protection and Pipeline Trigger
# on:
#   pull_request:
#     types: [opened, synchronize, ready_for_review]
#     branches: [test, prod]
#   push:
#     branches: [test, prod]

# permissions:
#   contents: write
#   pull-requests: write
#   checks: read
#   statuses: read

# jobs:
#   # Job 1: Validate PR and check approval status
#   validate-pr:
#     runs-on: ubuntu-latest
#     if: github.event_name == 'pull_request'
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
        
#       - name: Validate allowed branch combinations
#         run: |
#           SOURCE_BRANCH="${{ github.event.pull_request.head.ref }}"
#           TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          
#           echo "üîç Validating PR from $SOURCE_BRANCH to $TARGET_BRANCH"
          
#           if [[ "$SOURCE_BRANCH" == "dev" && "$TARGET_BRANCH" == "test" ]]; then
#             echo "‚úÖ Valid PR: dev ‚Üí test"
#           elif [[ "$SOURCE_BRANCH" == "test" && "$TARGET_BRANCH" == "prod" ]]; then
#             echo "‚úÖ Valid PR: test ‚Üí prod"
#           else
#             echo "‚ùå Invalid branch combination!"
#             echo "Only the following PR combinations are allowed:"
#             echo "  ‚Ä¢ dev ‚Üí test"
#             echo "  ‚Ä¢ test ‚Üí prod"
#             exit 1
#           fi

#       - name: Check CODEOWNERS file
#         run: |
#           if [[ ! -f ".github/CODEOWNERS" && ! -f "CODEOWNERS" && ! -f "docs/CODEOWNERS" ]]; then
#             echo "‚ö†Ô∏è  Warning: No CODEOWNERS file found!"
#           else
#             echo "‚úÖ CODEOWNERS file found"
#           fi

#       - name: Wait for codeowner approval and validate merge readiness
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         run: |
#           echo "üîç Checking merge readiness..."
          
#           PR_NUMBER="${{ github.event.pull_request.number }}"
#           REPO="${{ github.repository }}"
#           MAX_ATTEMPTS=360  # 30 minutes
#           ATTEMPT=0
          
#           check_merge_status() {
#             # Get PR detailed status
#             PR_DATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
#               -H "Accept: application/vnd.github.v3+json" \
#               "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER")
            
#             MERGEABLE=$(echo "$PR_DATA" | jq -r '.mergeable // false')
#             MERGEABLE_STATE=$(echo "$PR_DATA" | jq -r '.mergeable_state // "unknown"')
            
#             # Get reviews
#             REVIEWS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
#               -H "Accept: application/vnd.github.v3+json" \
#               "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER/reviews")
            
#             # Check for any approved review (since only owner approval is needed)
#             HAS_APPROVAL=$(echo "$REVIEWS" | jq -r 'map(select(.state == "APPROVED")) | length > 0')
            
#             echo "üìä Merge Status:"
#             echo "  - Mergeable: $MERGEABLE"
#             echo "  - State: $MERGEABLE_STATE"
#             echo "  - Has Approval: $HAS_APPROVAL"
            
#             # Check if merge is ready
#             if [[ "$HAS_APPROVAL" == "true" && "$MERGEABLE" == "true" ]]; then
#               case "$MERGEABLE_STATE" in
#                 "clean"|"unstable")
#                   echo "‚úÖ PR is ready to merge!"
#                   return 0
#                   ;;
#                 "blocked")
#                   echo "üîí PR is still blocked - checking specific issues..."
#                   # Get status checks
#                   STATUS_CHECKS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
#                     -H "Accept: application/vnd.github.v3+json" \
#                     "https://api.github.com/repos/$REPO/commits/${{ github.event.pull_request.head.sha }}/status")
                  
#                   COMBINED_STATUS=$(echo "$STATUS_CHECKS" | jq -r '.state // "unknown"')
#                   echo "  - Combined Status: $COMBINED_STATUS"
                  
#                   if [[ "$COMBINED_STATUS" == "success" || "$COMBINED_STATUS" == "pending" ]]; then
#                     echo "‚úÖ Status checks are passing - PR should be mergeable soon"
#                     return 0
#                   fi
#                   return 1
#                   ;;
#                 *)
#                   echo "‚è≥ Waiting for merge state to stabilize..."
#                   return 1
#                   ;;
#               esac
#             elif [[ "$HAS_APPROVAL" != "true" ]]; then
#               echo "‚è≥ Still waiting for codeowner approval..."
#               return 1
#             else
#               echo "‚è≥ Approval received, waiting for merge conflicts to resolve..."
#               return 1
#             fi
#           }
          
#           while [[ $ATTEMPT -lt $MAX_ATTEMPTS ]]; do
#             if check_merge_status; then
#               echo "üéâ PR validation complete - ready for merge!"
#               break
#             fi
            
#             ATTEMPT=$((ATTEMPT + 1))
#             MINUTES_ELAPSED=$(( (ATTEMPT * 5) / 60 ))
            
#             if [[ $(( ATTEMPT % 12 )) -eq 0 ]]; then  # Every minute
#               echo "‚è±Ô∏è  Still checking... (${MINUTES_ELAPSED}m elapsed)"
#             fi
            
#             if [[ $ATTEMPT -eq $MAX_ATTEMPTS ]]; then
#               echo "‚ùå Timeout: Merge requirements not met after 30 minutes"
#               echo "üîß Possible solutions:"
#               echo "  ‚Ä¢ Check if all required status checks are passing"
#               echo "  ‚Ä¢ Ensure branch protection allows codeowner-only approval"
#               echo "  ‚Ä¢ Verify no merge conflicts exist"
#               echo "  ‚Ä¢ Check if bypass permissions are needed"
#               exit 1
#             fi
            
#             sleep 5
#           done

#       - name: Provide merge guidance
#         run: |
#           echo "‚úÖ PR Validation Complete!"
#           echo ""
#           echo "üîß If you still see 'Merging is blocked', try these solutions:"
#           echo ""
#           echo "**Option 1: Use Bypass Protection (Recommended)**"
#           echo "1. Go to your PR on GitHub"
#           echo "2. Look for 'Merge without waiting for requirements to be met'"
#           echo "3. Check the bypass option and merge"
#           echo ""
#           echo "**Option 2: Update Branch Protection Settings**"
#           echo "1. Go to Settings > Branches > Edit protection rule"
#           echo "2. Under 'Restrict pushes that bypass pull request requirements'"
#           echo "3. Add your username or 'github-actions[bot]' to bypass list"
#           echo ""
#           echo "**Option 3: Use Admin Override**"
#           echo "1. Repository admins can always bypass protection"
#           echo "2. Use 'Merge without waiting' option"
#           echo ""
#           echo "üéØ Current PR Status: Ready for merge with owner approval ‚úÖ"

#   # Job 2: Trigger pipeline after successful merge
#   trigger-harness-pipeline:
#     runs-on: ubuntu-latest
#     if: |
#       github.event_name == 'push' && 
#       (github.ref == 'refs/heads/test' || github.ref == 'refs/heads/prod')
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
        
#       - name: Determine migration configuration
#         id: migration-config
#         run: |
#           BRANCH_NAME="${{ github.ref_name }}"
          
#           if [[ "$BRANCH_NAME" == "test" ]]; then
#             echo "migration_type=dev-to-test" >> $GITHUB_OUTPUT
#             echo "mwaa_env=${{ vars.TEST_MWAA }}" >> $GITHUB_OUTPUT
#             echo "environment=test" >> $GITHUB_OUTPUT
#           elif [[ "$BRANCH_NAME" == "prod" ]]; then
#             echo "migration_type=test-to-prod" >> $GITHUB_OUTPUT
#             echo "mwaa_env=${{ vars.PROD_MWAA_ENV }}" >> $GITHUB_OUTPUT
#             echo "environment=production" >> $GITHUB_OUTPUT
#           fi
          
#           echo "üéØ Target branch: $BRANCH_NAME"
#           echo "üì¶ Migration type: $(cat $GITHUB_OUTPUT | grep migration_type | cut -d'=' -f2)"
          
#       - name: Get commit details
#         id: commit-info
#         run: |
#           echo "commit_message=$(git log -1 --pretty=%B | head -1)" >> $GITHUB_OUTPUT
#           echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
#           echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          
#       - name: Trigger Harness Pipeline
#         run: |
#           echo "üöÄ Triggering Harness pipeline for ${{ steps.migration-config.outputs.migration_type }}"
          
#           RESPONSE=$(curl -s -w "%{http_code}" -X POST "${{ secrets.HARNESS_WEBHOOK_URL }}" \
#             -H "Content-Type: application/json" \
#             -H "Authorization: Bearer ${{ secrets.HARNESS_API_TOKEN }}" \
#             -d '{
#               "repository": "${{ github.repository }}",
#               "branch": "${{ github.ref_name }}",
#               "commit_sha": "${{ steps.commit-info.outputs.commit_sha }}",
#               "commit_message": "${{ steps.commit-info.outputs.commit_message }}",
#               "commit_author": "${{ steps.commit-info.outputs.commit_author }}",
#               "migration_type": "${{ steps.migration-config.outputs.migration_type }}",
#               "mwaa_environment": "${{ steps.migration-config.outputs.mwaa_env }}",
#               "environment": "${{ steps.migration-config.outputs.environment }}",
#               "triggered_by": "${{ github.actor }}"
#             }')
          
#           HTTP_CODE="${RESPONSE: -3}"
#           RESPONSE_BODY="${RESPONSE%???}"
          
#           if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
#             echo "‚úÖ Successfully triggered Harness pipeline"
#           else
#             echo "‚ùå Failed to trigger Harness pipeline (HTTP $HTTP_CODE)"
#             exit 1
#           fi


# .github/workflows/protected-pr.yml
# # .github/workflows/protected-pr.yml
# name: Branch Protection and Pipeline Trigger
# on:
#   pull_request:
#     types: [opened, synchronize, ready_for_review, reopened]
#     branches: [tst, prd]
#   push:
#     branches: [tst, prd]
# permissions:                # needed for the polling job
#   contents: write
#   pull-requests: write
#   checks: write
#   statuses: write
# jobs:
# # ----------------------------------------------------------------------
# # 1. Light validation of PR source/target + CODEOWNERS file
# #    --> reports the status-check   validate-pr
# # ----------------------------------------------------------------------
#   validate-pr:
#     name: validate-pr         # ‚Üê must match status-check context
#     runs-on: ubuntu-latest
#     if: github.event_name == 'pull_request'
#     steps:
#       - uses: actions/checkout@v4
#       - name: Enforce allowed branch flow (dev‚Üítst, tst‚Üíprd)
#         run: |
#           SRC="${{ github.head_ref }}"
#           DST="${{ github.base_ref }}"
#           case "${SRC}:${DST}" in
#             dev:tst|tst:prd)  echo "‚úÖ branch flow allowed" ;;
#             *)                   echo "‚ùå invalid branch flow ${SRC} ‚Üí ${DST}"; exit 1 ;;
#           esac
#       - name: Check that a CODEOWNERS file exists
#         run: |
#           if [[ -f .github/CODEOWNERS || -f CODEOWNERS || -f docs/CODEOWNERS ]]; then
#             echo "‚úÖ CODEOWNERS file found"
#           else
#             echo "‚ùå No CODEOWNERS file found"; exit 1
#           fi
# # ----------------------------------------------------------------------
# # 2. Poll until a code-owner has approved the PR
# #    --> reports the status-check   codeowner-approval
# #    add this context to the protection rule instead of (or in addition to) validate-pr
# # ----------------------------------------------------------------------
#   codeowner-approval:
#     name: codeowner-approval   # ‚Üê second required status-check
#     runs-on: ubuntu-latest
#     if: github.event_name == 'pull_request'
#     needs: validate-pr         # stop early if validate-pr failed
#     timeout-minutes: 30
#     steps:
#       - name: Wait for a code-owner approval
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         run: |
#           PR="${{ github.event.pull_request.number }}"
#           REPO="${{ github.repository }}"
#           echo "üïô polling every 5 s for code-owner approval (max 30 min)‚Ä¶"
#           for i in $(seq 1 360); do
#             # list reviews ‚Üí keep last state per reviewer ‚Üí filter APPROVED
#             approved=$(gh api \
#               repos/${REPO}/pulls/${PR}/reviews \
#               --jq '[group_by(.user.login)[].[-1] | select(.state=="APPROVED")] | length')
#             if [[ "$approved" -gt 0 ]]; then
#               echo "üéâ code-owner has approved ‚Äì check succeeds"
#               exit 0
#             fi
#             sleep 5
#           done
#           echo "‚åõ timed-out waiting for code-owner approval"
#           exit 1
# # ----------------------------------------------------------------------
# # 3. Runs only after the PR is merged into tst ‚ñ∏ prd branches
# # ----------------------------------------------------------------------
#   trigger-harness-pipeline:
#     runs-on: ubuntu-latest
#     if: >
#       github.event_name == 'push' &&
#       (github.ref == 'refs/heads/tst' || github.ref == 'refs/heads/prd')
#     steps:
#        - name: Checkout code
#          uses: actions/checkout@v4
        
#        - name: Determine migration configuration
#          id: migration-config
#          run: |
#            BRANCH_NAME="${{ github.ref_name }}"
         
#            if [[ "$BRANCH_NAME" == "tst" ]]; then
#              echo "migration_type=dev-to-tst" >> $GITHUB_OUTPUT
#              echo "environment=tst" >> $GITHUB_OUTPUT
#            elif [[ "$BRANCH_NAME" == "prd" ]]; then
#              echo "migration_type=tst-to-prd" >> $GITHUB_OUTPUT
#              echo "environment=prd" >> $GITHUB_OUTPUT
#            fi
          
#            echo "üéØ Target branch: $BRANCH_NAME"
#            echo "üì¶ Migration type: $(cat $GITHUB_OUTPUT | grep migration_type | cut -d'=' -f2)"
          
#        - name: Get commit details
#          id: commit-info
#          run: |
#            echo "commit_message=$(git log -1 --pretty=%B | head -1)" >> $GITHUB_OUTPUT
#            echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
#            echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
#        - name: Get PR details from merge commit
#          id: pr-info
#          run: |
#            # Try to find the PR that was merged using the commit SHA
#            PR_NUMBER=$(gh pr list --state merged --search "sha:${{ github.sha }}" --json number --jq '.[0].number // empty')
           
#            if [[ -n "$PR_NUMBER" ]]; then
#              echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
#              echo "pr_url=https://github.com/${{ github.repository }}/pull/$PR_NUMBER" >> $GITHUB_OUTPUT
#              echo "üîó Found PR: #$PR_NUMBER"
#            else
#              # Fallback: try to extract PR number from merge commit message
#              COMMIT_MSG="${{ steps.commit-info.outputs.commit_message }}"
#              if [[ "$COMMIT_MSG" =~ Merge\ pull\ request\ #([0-9]+) ]]; then
#                PR_NUMBER="${BASH_REMATCH[1]}"
#                echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
#                echo "pr_url=https://github.com/${{ github.repository }}/pull/$PR_NUMBER" >> $GITHUB_OUTPUT
#                echo "üîó Extracted PR from commit message: #$PR_NUMBER"
#              else
#                echo "pr_number=" >> $GITHUB_OUTPUT
#                echo "pr_url=" >> $GITHUB_OUTPUT
#                echo "‚ö†Ô∏è Could not determine PR number"
#              fi
#            fi
#          env:
#            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
#        - name: Trigger Harness Pipeline
#          run: |
#            echo "üöÄ Triggering Harness pipeline for ${{ steps.migration-config.outputs.migration_type }}"
          
#            RESPONSE=$(curl -s -w "%{http_code}" -X POST "${{ secrets.HARNESS_WEBHOOK_URL }}" \
#              -H "Content-Type: application/json" \
#              -d '{
#                "repository": "${{ github.server_url }}/${{ github.repository }}",
#                "triggered_by": "${{ github.actor }}",
#                "migration_type": "${{ steps.migration-config.outputs.migration_type }}",
#                "environment": "${{ steps.migration-config.outputs.environment }}",
#                "PR_URL": "${{ steps.pr-info.outputs.pr_url }}",
#                "EDB_ID": "${{ vars.EDB_ID }}"
#              }')
          
#            HTTP_CODE="${RESPONSE: -3}"
#            RESPONSE_BODY="${RESPONSE%???}"
         
#            if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
#              echo "‚úÖ Successfully triggered Harness pipeline"
#              if [[ -n "${{ steps.pr-info.outputs.pr_url }}" ]]; then
#                echo "üîó Related PR: ${{ steps.pr-info.outputs.pr_url }}"
#              fi
#            else
#              echo "‚ùå Failed to trigger Harness pipeline (HTTP $HTTP_CODE)"
#              exit 1
#            fi
# .github/workflows/protected-pr.yml
# .github/workflows/protected-pr.yml
# .github/workflows/protected-pr.yml
# .github/workflows/protected-pr.yml
# .github/workflows/protected-pr.yml
name: Branch Protection and Pipeline Trigger
on:
  pull_request:
    types: [opened, synchronize, ready_for_review, reopened]
    branches: [tst, prd]
  push:
    branches: [tst, prd]
permissions:
  contents: write
  pull-requests: write
  checks: write
  statuses: write
  security-events: write
  actions: read
  issues: write

jobs:
# ----------------------------------------------------------------------
# 1. Light validation of PR source/target + CODEOWNERS file
#    --> reports the status-check   validate-pr
# ----------------------------------------------------------------------
  validate-pr:
    name: validate-pr
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      status: ${{ steps.set-status.outputs.status }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Enforce allowed branch flow (dev‚Üítst, tst‚Üíprd)
        run: |
          SRC="${{ github.head_ref }}"
          DST="${{ github.base_ref }}"
          case "${SRC}:${DST}" in
            dev:tst|tst:prd)  echo "‚úÖ branch flow allowed" ;;
            *)                   echo "‚ùå invalid branch flow ${SRC} ‚Üí ${DST}"; exit 1 ;;
          esac
          
      - name: Check that a CODEOWNERS file exists
        run: |
          if [[ -f .github/CODEOWNERS || -f CODEOWNERS || -f docs/CODEOWNERS ]]; then
            echo "‚úÖ CODEOWNERS file found"
          else
            echo "‚ùå No CODEOWNERS file found"; exit 1
          fi
          
      - name: Set job status
        id: set-status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

# ----------------------------------------------------------------------
# 2. CodeQL and Copilot Autofix Security Analysis - BLOCKS if issues found
#    --> reports the status-check   code-security
# ----------------------------------------------------------------------
  code-security:
    name: code-security
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: validate-pr
    outputs:
      codeql_status: ${{ steps.set-codeql-status.outputs.status }}
      copilot_status: ${{ steps.set-copilot-status.outputs.status }}
      has_security_issues: ${{ steps.check-security-issues.outputs.has_issues }}
      issues_acknowledged: ${{ steps.check-acknowledgment.outputs.acknowledged }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality
        
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        
      - name: Perform CodeQL Analysis
        id: codeql-analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"
          
      - name: Check for CodeQL Security Issues
        id: check-security-issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="${{ github.repository }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          # Wait a moment for CodeQL results to be processed
          sleep 10
          
          # Get CodeQL alerts for this repository
          ALERTS=$(gh api "repos/$REPO/code-scanning/alerts" \
            --jq '[.[] | select(.state == "open" and (.rule.security_severity_level == "high" or .rule.security_severity_level == "critical"))] | length' 2>/dev/null || echo "0")
          
          # Get alerts introduced by this PR
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          NEW_ALERTS=$(gh api "repos/$REPO/code-scanning/alerts" \
            --jq '[.[] | select(.state == "open" and .most_recent_instance.commit_sha == "'$HEAD_SHA'" and (.rule.security_severity_level == "high" or .rule.security_severity_level == "critical"))] | length' 2>/dev/null || echo "0")
          
          echo "Total open high/critical alerts: $ALERTS"
          echo "New alerts in this PR: $NEW_ALERTS"
          
          if [[ "$NEW_ALERTS" -gt 0 ]]; then
            echo "has_issues=true" >> $GITHUB_OUTPUT
            echo "‚ùå Found $NEW_ALERTS new high/critical security issues in this PR"
            
            # Get detailed alert information
            gh api "repos/$REPO/code-scanning/alerts" \
              --jq '[.[] | select(.state == "open" and .most_recent_instance.commit_sha == "'$HEAD_SHA'" and (.rule.security_severity_level == "high" or .rule.security_severity_level == "critical")) | {rule: .rule.description, severity: .rule.security_severity_level, location: .most_recent_instance.location, url: .html_url}]' \
              > codeql_issues.json 2>/dev/null || echo "[]" > codeql_issues.json
            
            echo "## üö® CodeQL Security Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "This PR introduces **$NEW_ALERTS** new high/critical security issues:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Format issues for summary
            if [[ -s codeql_issues.json ]]; then
              jq -r '.[] | "- **" + (.severity // "unknown") + "**: " + (.rule // "Unknown Rule") + " in `" + ((.location.path // "Unknown") + ":" + (.location.start_line | tostring)) + "`"' codeql_issues.json >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üìù **Copilot Autofix**: Check the Security tab for automated fix suggestions" >> $GITHUB_STEP_SUMMARY
            
          else
            echo "has_issues=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No new high/critical security issues found"
          fi
          
      - name: Post Security Issues Comment
        if: steps.check-security-issues.outputs.has_issues == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let commentBody = `## üö® Security Issues Detected\n\n`;
            commentBody += `This PR introduces new high/critical security issues that must be addressed.\n\n`;
            
            // Read issues if file exists and has content
            let issues = [];
            try {
              if (fs.existsSync('codeql_issues.json')) {
                const content = fs.readFileSync('codeql_issues.json', 'utf8').trim();
                if (content && content !== '[]') {
                  issues = JSON.parse(content);
                }
              }
            } catch (error) {
              console.log('Could not read issues file:', error.message);
            }
            
            if (issues.length > 0) {
              commentBody += `### Issues Found:\n\n`;
              for (let i = 0; i < issues.length; i++) {
                const issue = issues[i];
                commentBody += `**${i + 1}. ${issue.rule || 'Security Issue'}**\n`;
                commentBody += `- **Severity:** ${issue.severity || 'Unknown'}\n`;
                commentBody += `- **Location:** \`${issue.location?.path || 'Unknown'}:${issue.location?.start_line || 'Unknown'}\`\n`;
                if (issue.url) {
                  commentBody += `- **[View Details](${issue.url})**\n`;
                }
                commentBody += `\n`;
              }
            }
            
            commentBody += `### ü§ñ Copilot Autofix Available\n`;
            commentBody += `GitHub Copilot Autofix has been enabled for this repository. Check the **Security tab** for automated fix suggestions.\n\n`;
            commentBody += `### Next Steps:\n`;
            commentBody += `1. ‚úÖ **Review Copilot Autofix suggestions** in the Security tab\n`;
            commentBody += `2. üîß **Apply fixes** or implement manual fixes\n`;
            commentBody += `3. üîÑ **Push your changes** to trigger a new security scan\n`;
            commentBody += `4. üö´ **Or acknowledge issues** by commenting: \`/acknowledge-security-issues\`\n\n`;
            commentBody += `‚ö†Ô∏è **The workflow is blocked until these issues are resolved or acknowledged.**`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
            
      - name: Check for Issue Acknowledgment
        id: check-acknowledgment
        if: steps.check-security-issues.outputs.has_issues == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO="${{ github.repository }}"
          
          # Check for acknowledgment comment
          ACKNOWLEDGED=$(gh api "repos/$REPO/issues/$PR_NUMBER/comments" \
            --jq '.[] | select(.body | contains("/acknowledge-security-issues")) | .user.login' | head -1)
          
          # Check if PR has 'security-issues-acknowledged' label
          LABEL_EXISTS=$(gh api "repos/$REPO/issues/$PR_NUMBER/labels" \
            --jq '.[] | select(.name == "security-issues-acknowledged") | .name' | head -1)
          
          if [[ -n "$ACKNOWLEDGED" || -n "$LABEL_EXISTS" ]]; then
            echo "acknowledged=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Security issues acknowledged by: $ACKNOWLEDGED"
            
            # Add label if not present
            if [[ -z "$LABEL_EXISTS" ]]; then
              gh api "repos/$REPO/issues/$PR_NUMBER/labels" -f labels='["security-issues-acknowledged"]' || true
            fi
          else
            echo "acknowledged=false" >> $GITHUB_OUTPUT
            echo "‚ùå Security issues not yet acknowledged"
          fi
          
      - name: Block if Security Issues Not Resolved or Acknowledged
        if: steps.check-security-issues.outputs.has_issues == 'true' && steps.check-acknowledgment.outputs.acknowledged == 'false'
        run: |
          echo "üö´ WORKFLOW BLOCKED: Security issues detected and not acknowledged"
          echo "Please either:"
          echo "  1. Fix the security issues using Copilot Autofix suggestions"
          echo "  2. Push your changes to trigger a new security scan"
          echo "  3. Comment '/acknowledge-security-issues' to proceed with known issues"
          exit 1
          
      - name: Set CodeQL status
        id: set-codeql-status
        if: always()
        run: |
          if [[ "${{ steps.codeql-analysis.outcome }}" == "success" ]]; then
            if [[ "${{ steps.check-security-issues.outputs.has_issues }}" == "true" && "${{ steps.check-acknowledgment.outputs.acknowledged }}" == "false" ]]; then
              echo "status=blocked" >> $GITHUB_OUTPUT
            else
              echo "status=success" >> $GITHUB_OUTPUT
            fi
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
          
      - name: Set Copilot status
        id: set-copilot-status
        if: always()
        run: |
          # Copilot Autofix is built-in, so status is based on whether it's enabled and working
          if [[ "${{ steps.check-security-issues.outputs.has_issues }}" == "true" ]]; then
            echo "status=autofix_available" >> $GITHUB_OUTPUT
          else
            echo "status=not_needed" >> $GITHUB_OUTPUT
          fi

# ----------------------------------------------------------------------
# 3. Poll until a code-owner has approved the PR
#    --> Only runs if security issues are resolved/acknowledged
# ----------------------------------------------------------------------
  codeowner-approval:
    name: codeowner-approval
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' && 
      (needs.code-security.outputs.has_security_issues == 'false' || 
       needs.code-security.outputs.issues_acknowledged == 'true')
    needs: [validate-pr, code-security]
    timeout-minutes: 30
    outputs:
      status: ${{ steps.set-approval-status.outputs.status }}
    steps:
      - name: Wait for a code-owner approval
        id: wait-approval
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR="${{ github.event.pull_request.number }}"
          REPO="${{ github.repository }}"
          echo "üïô polling every 5 s for code-owner approval (max 30 min)‚Ä¶"
          
          for i in $(seq 1 360); do
            approved=$(gh api "repos/$REPO/pulls/$PR/reviews" \
              --jq '[group_by(.user.login)[].[-1] | select(.state=="APPROVED")] | length')
            if [[ "$approved" -gt 0 ]]; then
              echo "üéâ code-owner has approved ‚Äì check succeeds"
              echo "approved=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            sleep 5
          done
          echo "‚åõ timed-out waiting for code-owner approval"
          echo "approved=false" >> $GITHUB_OUTPUT
          exit 1
          
      - name: Set approval status
        id: set-approval-status
        if: always()
        run: |
          if [[ "${{ steps.wait-approval.outputs.approved }}" == "true" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

# ----------------------------------------------------------------------
# 4. Runs only after the PR is merged into tst ‚ñ∏ prd branches
#    --> Platform approval with 24-hour timeout + Harness trigger
# ----------------------------------------------------------------------
  trigger-harness-pipeline:
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/tst' || github.ref == 'refs/heads/prd')
    outputs:
      harness_status: ${{ steps.set-harness-status.outputs.status }}
    steps:
       - name: Checkout code
         uses: actions/checkout@v4
         
       - name: Check Previous PR Workflow Status
         id: check-pr-status
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         run: |
           echo "üîç Checking status of previous PR workflow..."
           
           # Get the merge commit PR number
           COMMIT_MSG=$(git log -1 --pretty=%B | head -1)
           if [[ "$COMMIT_MSG" =~ Merge\ pull\ request\ #([0-9]+) ]]; then
             PR_NUMBER="${BASH_REMATCH[1]}"
             echo "üîó Found PR: #$PR_NUMBER"
           else
             echo "‚ùå Could not extract PR number from merge commit: $COMMIT_MSG"
             exit 1
           fi
           
           REPO="${{ github.repository }}"
           
           # Get PR information to get the head SHA
           echo "üìä Getting PR information..."
           PR_INFO=$(gh api "repos/$REPO/pulls/$PR_NUMBER")
           HEAD_SHA=$(echo "$PR_INFO" | jq -r '.head.sha')
           PR_HEAD_REF=$(echo "$PR_INFO" | jq -r '.head.ref')
           
           echo "üìä PR #$PR_NUMBER head SHA: $HEAD_SHA"
           echo "üìä PR #$PR_NUMBER head ref: $PR_HEAD_REF"
           
           # Find workflow runs with matching head_sha
           echo "üìä Searching for workflow runs with head SHA: $HEAD_SHA"
           MATCHING_RUNS=$(gh api "repos/$REPO/actions/runs" --paginate \
             --jq '.workflow_runs[] | select(.head_sha == "'$HEAD_SHA'" and .name == "Branch Protection and Pipeline Trigger" and .event == "pull_request")')
           
           if [[ -z "$MATCHING_RUNS" ]]; then
             echo "‚ùå No workflow run found for head SHA: $HEAD_SHA"
             echo "üìä Debugging: Available recent runs:"
             gh api "repos/$REPO/actions/runs" --jq '.workflow_runs[0:5] | .[] | {name: .name, event: .event, head_sha: .head_sha, conclusion: .conclusion}'
             exit 1
           fi
           
           # Get the latest matching run
           LATEST_RUN=$(echo "$MATCHING_RUNS" | jq -s 'sort_by(.run_number) | reverse | .[0]')
           WORKFLOW_ID=$(echo "$LATEST_RUN" | jq -r '.id')
           WORKFLOW_CONCLUSION=$(echo "$LATEST_RUN" | jq -r '.conclusion')
           
           echo "üìä Found workflow run ID: $WORKFLOW_ID"
           echo "üìä Workflow conclusion: $WORKFLOW_CONCLUSION"
           
           if [[ "$WORKFLOW_CONCLUSION" != "success" ]]; then
             echo "‚ùå PR workflow was not successful: $WORKFLOW_CONCLUSION"
             exit 1
           fi
           
           # Get individual job statuses from the PR workflow
           echo "üìä Getting job statuses from workflow run..."
           JOBS=$(gh api "repos/$REPO/actions/runs/$WORKFLOW_ID/jobs" --jq '.jobs')
           
           VALIDATE_PR_STATUS=$(echo "$JOBS" | jq -r '.[] | select(.name == "validate-pr") | .conclusion')
           CODE_SECURITY_STATUS=$(echo "$JOBS" | jq -r '.[] | select(.name == "code-security") | .conclusion')
           CODEOWNER_APPROVAL_STATUS=$(echo "$JOBS" | jq -r '.[] | select(.name == "codeowner-approval") | .conclusion')
           
           echo "‚úÖ validate-pr: $VALIDATE_PR_STATUS"
           echo "‚úÖ code-security: $CODE_SECURITY_STATUS"
           echo "‚úÖ codeowner-approval: $CODEOWNER_APPROVAL_STATUS"
           
           # Check that all required jobs succeeded
           if [[ "$VALIDATE_PR_STATUS" == "success" && "$CODE_SECURITY_STATUS" == "success" && "$CODEOWNER_APPROVAL_STATUS" == "success" ]]; then
             echo "üéâ All PR checks passed! Proceeding with platform approval"
             echo "pr_checks_passed=true" >> $GITHUB_OUTPUT
             echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
             echo "validate_pr_status=$VALIDATE_PR_STATUS" >> $GITHUB_OUTPUT
             echo "code_security_status=$CODE_SECURITY_STATUS" >> $GITHUB_OUTPUT
             echo "codeowner_approval_status=$CODEOWNER_APPROVAL_STATUS" >> $GITHUB_OUTPUT
             echo "workflow_run_id=$WORKFLOW_ID" >> $GITHUB_OUTPUT
           else
             echo "‚ùå PR checks did not all pass:"
             echo "   validate-pr: $VALIDATE_PR_STATUS"
             echo "   code-security: $CODE_SECURITY_STATUS" 
             echo "   codeowner-approval: $CODEOWNER_APPROVAL_STATUS"
             exit 1
           fi

       - name: Determine migration configuration
         id: migration-config
         run: |
           BRANCH_NAME="${{ github.ref_name }}"
         
           if [[ "$BRANCH_NAME" == "tst" ]]; then
             echo "migration_type=dev-to-tst" >> $GITHUB_OUTPUT
             echo "environment=tst" >> $GITHUB_OUTPUT
           elif [[ "$BRANCH_NAME" == "prd" ]]; then
             echo "migration_type=tst-to-prd" >> $GITHUB_OUTPUT
             echo "environment=prd" >> $GITHUB_OUTPUT
           fi
          
           echo "üéØ Target branch: $BRANCH_NAME"
           echo "üì¶ Migration type: $(cat $GITHUB_OUTPUT | grep migration_type | cut -d'=' -f2)"

       - name: Platform Approval Request
         id: platform-approval
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         run: |
           echo "üèóÔ∏è Creating platform approval request..."
           
           REPO="${{ github.repository }}"
           PR_NUMBER="${{ steps.check-pr-status.outputs.pr_number }}"
           MIGRATION_TYPE="${{ steps.migration-config.outputs.migration_type }}"
           ENVIRONMENT="${{ steps.migration-config.outputs.environment }}"
           
           # Get platform approver usernames from repository variables
           PLATFORM_APPROVER_1="${{ vars.PLATFORM_APPROVER_1 }}"
           PLATFORM_APPROVER_2="${{ vars.PLATFORM_APPROVER_2 }}"
           
           if [[ -z "$PLATFORM_APPROVER_1" || -z "$PLATFORM_APPROVER_2" ]]; then
             echo "‚ùå Platform approver usernames not found in repository variables"
             echo "Please set PLATFORM_APPROVER_1 and PLATFORM_APPROVER_2 in repository variables"
             exit 1
           fi
           
           echo "üë• Platform approvers: $PLATFORM_APPROVER_1, $PLATFORM_APPROVER_2"
           
           # Create approval issue
           ISSUE_TITLE="üöÄ Platform Approval Required: $MIGRATION_TYPE Deployment"
           ISSUE_BODY=$(cat <<EOF
           ## Platform Deployment Approval Required
           
           **Migration Type:** \`$MIGRATION_TYPE\`  
           **Target Environment:** \`$ENVIRONMENT\`  
           **Related PR:** #$PR_NUMBER  
           **Triggered By:** @${{ github.actor }}  
           **Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
           
           ### ‚úÖ All Pre-checks Passed:
           - **validate-pr**: ${{ steps.check-pr-status.outputs.validate_pr_status }}
           - **code-security**: ${{ steps.check-pr-status.outputs.code_security_status }}
           - **codeowner-approval**: ${{ steps.check-pr-status.outputs.codeowner_approval_status }}
           
           ### üéØ Action Required:
           Please review the deployment request and respond with one of the following commands:
           
           **To Approve:** Comment \`/approve\` or \`approved\` or \`lgtm\`  
           **To Reject:** Comment \`/reject\` or \`rejected\` or \`deny\`
           
           ### ‚è±Ô∏è Timeout Information:
           - **Approval Timeout:** 24 hours from issue creation
           - **Auto-rejection:** If no approval within timeout period
           - **Required Approvers:** Either @$PLATFORM_APPROVER_1 OR @$PLATFORM_APPROVER_2
           
           ---
           **Note:** This issue was automatically created by GitHub Actions workflow.
           EOF
           )
           
           # Create the approval issue
           ISSUE_RESPONSE=$(gh api "repos/$REPO/issues" \
             -f title="$ISSUE_TITLE" \
             -f body="$ISSUE_BODY" \
             -f assignees="$PLATFORM_APPROVER_1,$PLATFORM_APPROVER_2")
           
           ISSUE_NUMBER=$(echo "$ISSUE_RESPONSE" | jq -r '.number')
           ISSUE_URL=$(echo "$ISSUE_RESPONSE" | jq -r '.html_url')
           
           echo "üìã Created approval issue #$ISSUE_NUMBER"
           echo "üîó Issue URL: $ISSUE_URL"
           echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
           echo "issue_url=$ISSUE_URL" >> $GITHUB_OUTPUT

       - name: Wait for Platform Approval
         id: wait-approval
         timeout-minutes: 1440  # 24 hours
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         run: |
           echo "‚è≥ Waiting for platform approval..."
           
           REPO="${{ github.repository }}"
           ISSUE_NUMBER="${{ steps.platform-approval.outputs.issue_number }}"
           PLATFORM_APPROVER_1="${{ vars.PLATFORM_APPROVER_1 }}"
           PLATFORM_APPROVER_2="${{ vars.PLATFORM_APPROVER_2 }}"
           
           # Set timeout to 24 hours (86400 seconds)
           TIMEOUT_SECONDS=86400
           POLL_INTERVAL=30  # Check every 30 seconds
           MAX_ITERATIONS=$((TIMEOUT_SECONDS / POLL_INTERVAL))
           
           echo "‚è±Ô∏è Timeout: 24 hours ($TIMEOUT_SECONDS seconds)"
           echo "üîÑ Checking every $POLL_INTERVAL seconds"
           echo "üë• Waiting for approval from: $PLATFORM_APPROVER_1 OR $PLATFORM_APPROVER_2"
           
           for ((i=1; i<=MAX_ITERATIONS; i++)); do
             echo "üîç Check $i/$MAX_ITERATIONS - $(date)"
             
             # Get all comments on the issue
             COMMENTS=$(gh api "repos/$REPO/issues/$ISSUE_NUMBER/comments" --jq '.')
             
             # Check for approval or rejection comments from authorized users
             APPROVAL_FOUND=""
             REJECTION_FOUND=""
             
             while IFS= read -r comment; do
               if [[ -z "$comment" || "$comment" == "null" ]]; then
                 continue
               fi
               
               COMMENT_AUTHOR=$(echo "$comment" | jq -r '.user.login')
               COMMENT_BODY=$(echo "$comment" | jq -r '.body' | tr '[:upper:]' '[:lower:]')
               
               # Check if comment is from authorized approver
               if [[ "$COMMENT_AUTHOR" == "$PLATFORM_APPROVER_1" || "$COMMENT_AUTHOR" == "$PLATFORM_APPROVER_2" ]]; then
                 echo "üí¨ Comment from authorized approver @$COMMENT_AUTHOR: $COMMENT_BODY"
                 
                 # Check for approval keywords
                 if [[ "$COMMENT_BODY" =~ (approve|approved|lgtm|yes|/approve) ]]; then
                   APPROVAL_FOUND="$COMMENT_AUTHOR"
                   break 2
                 fi
                 
                 # Check for rejection keywords  
                 if [[ "$COMMENT_BODY" =~ (reject|rejected|deny|denied|no|/reject) ]]; then
                   REJECTION_FOUND="$COMMENT_AUTHOR"
                   break 2
                 fi
               fi
             done <<< "$(echo "$COMMENTS" | jq -c '.[]')"
             
             if [[ -n "$APPROVAL_FOUND" ]]; then
               echo "üéâ APPROVED by @$APPROVAL_FOUND!"
               echo "approved=true" >> $GITHUB_OUTPUT
               echo "approver=$APPROVAL_FOUND" >> $GITHUB_OUTPUT
               break
             fi
             
             if [[ -n "$REJECTION_FOUND" ]]; then
               echo "‚ùå REJECTED by @$REJECTION_FOUND"
               echo "approved=false" >> $GITHUB_OUTPUT
               echo "rejector=$REJECTION_FOUND" >> $GITHUB_OUTPUT
               break
             fi
             
             # Show remaining time
             REMAINING_SECONDS=$((TIMEOUT_SECONDS - (i * POLL_INTERVAL)))
             REMAINING_HOURS=$((REMAINING_SECONDS / 3600))
             REMAINING_MINS=$(( (REMAINING_SECONDS % 3600) / 60 ))
             echo "‚è±Ô∏è Time remaining: ${REMAINING_HOURS}h ${REMAINING_MINS}m"
             
             sleep $POLL_INTERVAL
           done
           
           # Check if we timed out
           if [[ -z "$APPROVAL_FOUND" && -z "$REJECTION_FOUND" ]]; then
             echo "‚è∞ TIMEOUT: No response received within 24 hours"
             echo "approved=false" >> $GITHUB_OUTPUT
             echo "timeout=true" >> $GITHUB_OUTPUT
           fi

       - name: Close Approval Issue
         if: always()
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         run: |
           REPO="${{ github.repository }}"
           ISSUE_NUMBER="${{ steps.platform-approval.outputs.issue_number }}"
           
           # Determine the outcome
           if [[ "${{ steps.wait-approval.outputs.approved }}" == "true" ]]; then
             STATUS="‚úÖ APPROVED"
             APPROVER="${{ steps.wait-approval.outputs.approver }}"
             FINAL_COMMENT="## ‚úÖ Deployment Approved\n\nApproved by: @$APPROVER\nTime: $(date)\n\nüöÄ Proceeding with Harness pipeline trigger..."
           elif [[ "${{ steps.wait-approval.outputs.timeout }}" == "true" ]]; then
             STATUS="‚è∞ TIMEOUT"
             FINAL_COMMENT="## ‚è∞ Approval Timeout\n\nNo response received within 24 hours.\nDeployment request has been automatically rejected.\n\nTime: $(date)"
           else
             STATUS="‚ùå REJECTED"
             REJECTOR="${{ steps.wait-approval.outputs.rejector }}"
             FINAL_COMMENT="## ‚ùå Deployment Rejected\n\nRejected by: @$REJECTOR\nTime: $(date)\n\n‚ùå Deployment cancelled."
           fi
           
           # Add final comment
           gh api "repos/$REPO/issues/$ISSUE_NUMBER/comments" \
             -f body="$FINAL_COMMENT"
           
           # Close the issue with appropriate label
           if [[ "${{ steps.wait-approval.outputs.approved }}" == "true" ]]; then
             gh api "repos/$REPO/issues/$ISSUE_NUMBER" \
               -f state="closed" \
               -f state_reason="completed"
             
             # Add approved label
             gh api "repos/$REPO/issues/$ISSUE_NUMBER/labels" \
               -f labels='["platform-approved","deployment"]' || true
           else
             gh api "repos/$REPO/issues/$ISSUE_NUMBER" \
               -f state="closed" \
               -f state_reason="not_planned"
             
             # Add rejected/timeout label
             if [[ "${{ steps.wait-approval.outputs.timeout }}" == "true" ]]; then
               gh api "repos/$REPO/issues/$ISSUE_NUMBER/labels" \
                 -f labels='["platform-timeout","deployment"]' || true
             else
               gh api "repos/$REPO/issues/$ISSUE_NUMBER/labels" \
                 -f labels='["platform-rejected","deployment"]' || true
             fi
           fi
           
           echo "üìã Issue #$ISSUE_NUMBER closed with status: $STATUS"

       - name: Check Platform Approval Status
         if: steps.wait-approval.outputs.approved != 'true'
         run: |
           echo "‚ùå Platform approval was not granted"
           if [[ "${{ steps.wait-approval.outputs.timeout }}" == "true" ]]; then
             echo "‚è∞ Reason: 24-hour timeout reached"
           else
             echo "‚ùå Reason: Explicitly rejected by ${{ steps.wait-approval.outputs.rejector }}"
           fi
           echo "üö´ Harness pipeline trigger cancelled"
           exit 1

       - name: Get commit details
         id: commit-info
         run: |
           echo "commit_message=$(git log -1 --pretty=%B | head -1)" >> $GITHUB_OUTPUT
           echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
           echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
           
       - name: Get PR details from merge commit
         id: pr-info
         run: |
           PR_NUMBER="${{ steps.check-pr-status.outputs.pr_number }}"
           echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
           echo "pr_url=https://github.com/${{ github.repository }}/pull/$PR_NUMBER" >> $GITHUB_OUTPUT
           echo "üîó Using PR: #$PR_NUMBER"
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
       - name: Trigger Harness Pipeline
         id: trigger-pipeline
         run: |
           echo "üöÄ Triggering Harness pipeline for ${{ steps.migration-config.outputs.migration_type }}"
           echo "‚úÖ Platform approval granted by: ${{ steps.wait-approval.outputs.approver }}"
          
           JOB_STATUSES=$(cat <<EOF
           {
             "validate_pr": "${{ steps.check-pr-status.outputs.validate_pr_status }}",
             "code_security": {
               "codeql": "${{ steps.check-pr-status.outputs.code_security_status }}",
               "copilot_autofix": "completed_in_pr",
               "had_security_issues": "checked_in_pr",
               "issues_acknowledged": "resolved_in_pr"
             },
             "codeowner_approval": "${{ steps.check-pr-status.outputs.codeowner_approval_status }}",
             "platform_approval": {
               "status": "approved",
               "approver": "${{ steps.wait-approval.outputs.approver }}",
               "approval_issue": "${{ steps.platform-approval.outputs.issue_number }}"
             },
             "workflow_run_id": "${{ github.run_id }}",
             "workflow_run_number": "${{ github.run_number }}",
             "pr_number": "${{ steps.check-pr-status.outputs.pr_number }}",
             "pr_workflow_run_id": "${{ steps.check-pr-status.outputs.workflow_run_id }}"
           }
           EOF
           )
          
           RESPONSE=$(curl -s -w "%{http_code}" -X POST "${{ secrets.HARNESS_WEBHOOK_URL }}" \
             -H "Content-Type: application/json" \
             -d "{
               \"repository\": \"${{ github.server_url }}/${{ github.repository }}\",
               \"triggered_by\": \"${{ github.actor }}\",
               \"migration_type\": \"${{ steps.migration-config.outputs.migration_type }}\",
               \"environment\": \"${{ steps.migration-config.outputs.environment }}\",
               \"PR_URL\": \"${{ steps.pr-info.outputs.pr_url }}\",
               \"EDB_ID\": \"${{ vars.EDB_ID }}\",
               \"job_statuses\": $JOB_STATUSES,
               \"commit_sha\": \"${{ github.sha }}\",
               \"commit_author\": \"${{ steps.commit-info.outputs.commit_author }}\",
               \"branch_name\": \"${{ github.ref_name }}\",
               \"platform_approver\": \"${{ steps.wait-approval.outputs.approver }}\"
             }")
          
           HTTP_CODE="${RESPONSE: -3}"
           RESPONSE_BODY="${RESPONSE%???}"
         
           if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
             echo "‚úÖ Successfully triggered Harness pipeline"
             echo "triggered=true" >> $GITHUB_OUTPUT
             echo "üîó Related PR: ${{ steps.pr-info.outputs.pr_url }}"
             echo "üë§ Platform Approved by: ${{ steps.wait-approval.outputs.approver }}"
           else
             echo "‚ùå Failed to trigger Harness pipeline (HTTP $HTTP_CODE)"
             echo "triggered=false" >> $GITHUB_OUTPUT
             echo "Response: $RESPONSE_BODY"
             exit 1
           fi
           
       - name: Set Harness status
         id: set-harness-status
         if: always()
         run: |
           if [[ "${{ steps.trigger-pipeline.outputs.triggered }}" == "true" ]]; then
             echo "status=success" >> $GITHUB_OUTPUT
           else
             echo "status=failure" >> $GITHUB_OUTPUT
           fi


  # trigger-harness-pipeline:
  #   runs-on: ubuntu-latest
  #   if: >
  #     github.event_name == 'push' &&
  #     (github.ref == 'refs/heads/tst' || github.ref == 'refs/heads/prd')
  #   outputs:
  #     harness_status: ${{ steps.set-harness-status.outputs.status }}
  #   steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v4

  #      - name: Check Previous PR Workflow Status
  #        id: check-pr-status
  #        env:
  #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #        run: |
  #          echo "üîç Checking status of previous PR workflow..."
           
  #          # Get the merge commit PR number
  #          COMMIT_MSG=$(git log -1 --pretty=%B | head -1)
  #          if [[ "$COMMIT_MSG" =~ Merge\ pull\ request\ #([0-9]+) ]]; then
  #            PR_NUMBER="${BASH_REMATCH[1]}"
  #            echo "üîó Found PR: #$PR_NUMBER"
  #          else
  #            echo "‚ùå Could not extract PR number from merge commit: $COMMIT_MSG"
  #            exit 1
  #          fi
           
  #          REPO="${{ github.repository }}"
           
  #          # Get PR information to get the head SHA
  #          echo "üìä Getting PR information..."
  #          PR_INFO=$(gh api "repos/$REPO/pulls/$PR_NUMBER")
  #          HEAD_SHA=$(echo "$PR_INFO" | jq -r '.head.sha')
  #          PR_HEAD_REF=$(echo "$PR_INFO" | jq -r '.head.ref')
           
  #          echo "üìä PR #$PR_NUMBER head SHA: $HEAD_SHA"
  #          echo "üìä PR #$PR_NUMBER head ref: $PR_HEAD_REF"
           
  #          # Find workflow runs with matching head_sha - Fixed to embed variables directly in jq
  #          echo "üìä Searching for workflow runs with head SHA: $HEAD_SHA"
  #          MATCHING_RUNS=$(gh api "repos/$REPO/actions/runs" --paginate \
  #            --jq '.workflow_runs[] | select(.head_sha == "'$HEAD_SHA'" and .name == "Branch Protection and Pipeline Trigger" and .event == "pull_request")')
           
  #          if [[ -z "$MATCHING_RUNS" ]]; then
  #            echo "‚ùå No workflow run found for head SHA: $HEAD_SHA"
  #            echo "üìä Debugging: Available recent runs:"
  #            gh api "repos/$REPO/actions/runs" --jq '.workflow_runs[0:5] | .[] | {name: .name, event: .event, head_sha: .head_sha, conclusion: .conclusion}'
  #            exit 1
  #          fi
           
  #          # Get the latest matching run (in case there are multiple)
  #          LATEST_RUN=$(echo "$MATCHING_RUNS" | jq -s 'sort_by(.run_number) | reverse | .[0]')
  #          WORKFLOW_ID=$(echo "$LATEST_RUN" | jq -r '.id')
  #          WORKFLOW_CONCLUSION=$(echo "$LATEST_RUN" | jq -r '.conclusion')
           
  #          echo "üìä Found workflow run ID: $WORKFLOW_ID"
  #          echo "üìä Workflow conclusion: $WORKFLOW_CONCLUSION"
           
  #          if [[ "$WORKFLOW_CONCLUSION" != "success" ]]; then
  #            echo "‚ùå PR workflow was not successful: $WORKFLOW_CONCLUSION"
  #            exit 1
  #          fi
           
  #          # Get individual job statuses from the PR workflow
  #          echo "üìä Getting job statuses from workflow run..."
  #          JOBS=$(gh api "repos/$REPO/actions/runs/$WORKFLOW_ID/jobs" --jq '.jobs')
           
  #          VALIDATE_PR_STATUS=$(echo "$JOBS" | jq -r '.[] | select(.name == "validate-pr") | .conclusion')
  #          CODE_SECURITY_STATUS=$(echo "$JOBS" | jq -r '.[] | select(.name == "code-security") | .conclusion')
  #          CODEOWNER_APPROVAL_STATUS=$(echo "$JOBS" | jq -r '.[] | select(.name == "codeowner-approval") | .conclusion')
           
  #          echo "‚úÖ validate-pr: $VALIDATE_PR_STATUS"
  #          echo "‚úÖ code-security: $CODE_SECURITY_STATUS"
  #          echo "‚úÖ codeowner-approval: $CODEOWNER_APPROVAL_STATUS"
           
  #          # Check that all required jobs succeeded
  #          if [[ "$VALIDATE_PR_STATUS" == "success" && "$CODE_SECURITY_STATUS" == "success" && "$CODEOWNER_APPROVAL_STATUS" == "success" ]]; then
  #            echo "üéâ All PR checks passed! Proceeding with Harness pipeline trigger"
  #            echo "pr_checks_passed=true" >> $GITHUB_OUTPUT
  #            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
  #            echo "validate_pr_status=$VALIDATE_PR_STATUS" >> $GITHUB_OUTPUT
  #            echo "code_security_status=$CODE_SECURITY_STATUS" >> $GITHUB_OUTPUT
  #            echo "codeowner_approval_status=$CODEOWNER_APPROVAL_STATUS" >> $GITHUB_OUTPUT
  #            echo "workflow_run_id=$WORKFLOW_ID" >> $GITHUB_OUTPUT
  #          else
  #            echo "‚ùå PR checks did not all pass:"
  #            echo "   validate-pr: $VALIDATE_PR_STATUS"
  #            echo "   code-security: $CODE_SECURITY_STATUS" 
  #            echo "   codeowner-approval: $CODEOWNER_APPROVAL_STATUS"
  #            exit 1
  #          fi
        
  #      - name: Determine migration configuration
  #        id: migration-config
  #        run: |
  #          BRANCH_NAME="${{ github.ref_name }}"
         
  #          if [[ "$BRANCH_NAME" == "tst" ]]; then
  #            echo "migration_type=dev-to-tst" >> $GITHUB_OUTPUT
  #            echo "environment=tst" >> $GITHUB_OUTPUT
  #          elif [[ "$BRANCH_NAME" == "prd" ]]; then
  #            echo "migration_type=tst-to-prd" >> $GITHUB_OUTPUT
  #            echo "environment=prd" >> $GITHUB_OUTPUT
  #          fi
          
  #          echo "üéØ Target branch: $BRANCH_NAME"
  #          echo "üì¶ Migration type: $(cat $GITHUB_OUTPUT | grep migration_type | cut -d'=' -f2)"
          
  #      - name: Get commit details
  #        id: commit-info
  #        run: |
  #          echo "commit_message=$(git log -1 --pretty=%B | head -1)" >> $GITHUB_OUTPUT
  #          echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
  #          echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
           
  #      - name: Get PR details from merge commit
  #        id: pr-info
  #        run: |
  #          PR_NUMBER="${{ steps.check-pr-status.outputs.pr_number }}"
  #          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
  #          echo "pr_url=https://github.com/${{ github.repository }}/pull/$PR_NUMBER" >> $GITHUB_OUTPUT
  #          echo "üîó Using PR: #$PR_NUMBER"
  #        env:
  #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  #      - name: Trigger Harness Pipeline
  #        id: trigger-pipeline
  #        run: |
  #          echo "üöÄ Triggering Harness pipeline for ${{ steps.migration-config.outputs.migration_type }}"
          
  #          JOB_STATUSES=$(cat <<EOF
  #          {
  #            "validate_pr": "${{ steps.check-pr-status.outputs.validate_pr_status }}",
  #            "code_security": {
  #              "codeql": "${{ steps.check-pr-status.outputs.code_security_status }}",
  #              "copilot_autofix": "completed_in_pr",
  #              "had_security_issues": "checked_in_pr",
  #              "issues_acknowledged": "resolved_in_pr"
  #            },
  #            "codeowner_approval": "${{ steps.check-pr-status.outputs.codeowner_approval_status }}",
  #            "workflow_run_id": "${{ github.run_id }}",
  #            "workflow_run_number": "${{ github.run_number }}",
  #            "pr_number": "${{ steps.check-pr-status.outputs.pr_number }}",
  #            "pr_workflow_run_id": "${{ steps.check-pr-status.outputs.workflow_run_id }}"
  #          }
  #          EOF
  #          )
          
  #          RESPONSE=$(curl -s -w "%{http_code}" -X POST "${{ secrets.HARNESS_WEBHOOK_URL }}" \
  #            -H "Content-Type: application/json" \
  #            -d "{
  #              \"repository\": \"${{ github.server_url }}/${{ github.repository }}\",
  #              \"triggered_by\": \"${{ github.actor }}\",
  #              \"migration_type\": \"${{ steps.migration-config.outputs.migration_type }}\",
  #              \"environment\": \"${{ steps.migration-config.outputs.environment }}\",
  #              \"PR_URL\": \"${{ steps.pr-info.outputs.pr_url }}\",
  #              \"EDB_ID\": \"${{ vars.EDB_ID }}\",
  #              \"job_statuses\": $JOB_STATUSES,
  #              \"commit_sha\": \"${{ github.sha }}\",
  #              \"commit_author\": \"${{ steps.commit-info.outputs.commit_author }}\",
  #              \"branch_name\": \"${{ github.ref_name }}\"
  #            }")
          
  #          HTTP_CODE="${RESPONSE: -3}"
  #          RESPONSE_BODY="${RESPONSE%???}"
         
  #          if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
  #            echo "‚úÖ Successfully triggered Harness pipeline"
  #            echo "triggered=true" >> $GITHUB_OUTPUT
  #            echo "üîó Related PR: ${{ steps.pr-info.outputs.pr_url }}"
  #          else
  #            echo "‚ùå Failed to trigger Harness pipeline (HTTP $HTTP_CODE)"
  #            echo "triggered=false" >> $GITHUB_OUTPUT
  #            echo "Response: $RESPONSE_BODY"
  #            exit 1
  #          fi
           
  #      - name: Set Harness status
  #        id: set-harness-status
  #        if: always()
  #        run: |
  #          if [[ "${{ steps.trigger-pipeline.outputs.triggered }}" == "true" ]]; then
  #            echo "status=success" >> $GITHUB_OUTPUT
  #          else
  #            echo "status=failure" >> $GITHUB_OUTPUT
  #          fi

