# name: Trigger Harness Pipeline on PR

# on:
#   pull_request:
#     types: [opened, synchronize, reopened]
#     branches: [test, prod]

# permissions:
#   contents: read
#   pull-requests: write
#   issues: write

# jobs:
#   trigger-harness-pipeline:
#     runs-on: ubuntu-latest
#     if: |
#       (github.event.pull_request.head.ref == 'dev' && github.event.pull_request.base.ref == 'test') ||
#       (github.event.pull_request.head.ref == 'test' && github.event.pull_request.base.ref == 'prod')
    
#     steps:
#       - name: Determine Migration Type
#         id: migration-config
#         run: |
#           if [[ "${{ github.event.pull_request.head.ref }}" == "dev" && "${{ github.event.pull_request.base.ref }}" == "test" ]]; then
#             echo "migration_type=dev-to-test" >> $GITHUB_OUTPUT
#             echo "mwaa_env=${{ vars.TEST_MWAA }}" >> $GITHUB_OUTPUT
#           elif [[ "${{ github.event.pull_request.head.ref }}" == "test" && "${{ github.event.pull_request.base.ref }}" == "prod" ]]; then
#             echo "migration_type=test-to-prod" >> $GITHUB_OUTPUT
#             echo "mwaa_env=${{ vars.PROD_MWAA_ENV }}" >> $GITHUB_OUTPUT
#           fi

#       - name: Trigger Harness Pipeline
#         run: |
#           echo "üöÄ Triggering Harness pipeline for ${{ steps.migration-config.outputs.migration_type }}"
#           echo "üë§ Triggered by: ${{ github.actor }}"
          
#           curl -X POST "${{ secrets.HARNESS_WEBHOOK_URL }}" \
#             -H "Content-Type: application/json" \
#             -d '{
#               "repository": "${{ github.repository }}",
#               "pr_number": ${{ github.event.number }},
#               "pr_title": "${{ github.event.pull_request.title }}",
#               "migration_type": "${{ steps.migration-config.outputs.migration_type }}",
#               "mwaa_environment": "${{ steps.migration-config.outputs.mwaa_env }}",
#               "triggered_by": "${{ github.actor }}",
#               "github_user": "${{ github.actor }}",
#               "commit_sha": "${{ github.event.pull_request.head.sha }}",
#               "source_branch": "${{ github.event.pull_request.head.ref }}",
#               "target_branch": "${{ github.event.pull_request.base.ref }}"
#             }'

#       - name: Comment on PR
#         run: |
#           curl -X POST \
#             -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
#             -H "Content-Type: application/json" \
#             https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
#             -d '{
#               "body": "üöÄ **Harness Pipeline Triggered**\n\n**Migration:** `${{ steps.migration-config.outputs.migration_type }}`\n**MWAA Environment:** `${{ steps.migration-config.outputs.mwaa_env }}`\n**Triggered by:** @${{ github.actor }}"
#             }' \
#             --fail-with-body || echo "Comment failed but pipeline triggered"

name: Trigger Harness Pipeline on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [test, prod]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  trigger-harness-pipeline:
    runs-on: ubuntu-latest
    if: |
      (github.event.pull_request.head.ref == 'dev' && github.event.pull_request.base.ref == 'test') ||
      (github.event.pull_request.head.ref == 'test' && github.event.pull_request.base.ref == 'prod')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Migration Type
        id: migration-config
        run: |
          if [[ "${{ github.event.pull_request.head.ref }}" == "dev" && "${{ github.event.pull_request.base.ref }}" == "test" ]]; then
            echo "migration_type=dev-to-test" >> $GITHUB_OUTPUT
            echo "mwaa_env=${{ vars.TEST_MWAA }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.pull_request.head.ref }}" == "test" && "${{ github.event.pull_request.base.ref }}" == "prod" ]]; then
            echo "migration_type=test-to-prod" >> $GITHUB_OUTPUT
            echo "mwaa_env=${{ vars.PROD_MWAA_ENV }}" >> $GITHUB_OUTPUT
          fi

      - name: Trigger Harness Pipeline
        id: trigger-pipeline
        run: |
          echo "üöÄ Triggering Harness pipeline for ${{ steps.migration-config.outputs.migration_type }}"
          echo "üë§ Triggered by: ${{ github.actor }}"
          
          response=$(curl -s -X POST "${{ secrets.HARNESS_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "repository": "${{ github.repository }}",
              "pr_number": ${{ github.event.number }},
              "pr_title": "${{ github.event.pull_request.title }}",
              "migration_type": "${{ steps.migration-config.outputs.migration_type }}",
              "mwaa_environment": "${{ steps.migration-config.outputs.mwaa_env }}",
              "triggered_by": "${{ github.actor }}",
              "github_user": "${{ github.actor }}",
              "commit_sha": "${{ github.event.pull_request.head.sha }}",
              "source_branch": "${{ github.event.pull_request.head.ref }}",
              "target_branch": "${{ github.event.pull_request.base.ref }}"
            }')
          
          echo "Harness response: $response"
          
          # Extract execution details from response
          execution_id=$(echo "$response" | jq -r '.data.planExecution.uuid // .eventCorrelationId // .executionId // .id')
          api_url=$(echo "$response" | jq -r '.data.apiUrl // .apiUrl')
          
          echo "execution_id=$execution_id" >> $GITHUB_OUTPUT
          echo "api_url=$api_url" >> $GITHUB_OUTPUT
          echo "Pipeline execution ID: $execution_id"
          echo "Status API URL: $api_url"

      - name: Comment on PR - Pipeline Triggered
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
            -d '{
              "body": "üöÄ **Harness Pipeline Triggered**\n\n**Migration:** `${{ steps.migration-config.outputs.migration_type }}`\n**MWAA Environment:** `${{ steps.migration-config.outputs.mwaa_env }}`\n**Triggered by:** @${{ github.actor }}\n**Execution ID:** `${{ steps.trigger-pipeline.outputs.execution_id }}`\n\n‚è≥ Monitoring pipeline status..."
            }'

      - name: Monitor Pipeline Status (No Auth Required)
        id: monitor-pipeline
        run: |
          api_url="${{ steps.trigger-pipeline.outputs.api_url }}"
          execution_id="${{ steps.trigger-pipeline.outputs.execution_id }}"
          
          if [[ -z "$api_url" || "$api_url" == "null" ]]; then
            echo "‚ùå No API URL received from Harness trigger response"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "failure_reason=No API URL received from Harness webhook response" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "Monitoring pipeline using URL: $api_url"
          
          # Poll pipeline status using the provided API URL (no authentication needed)
          max_attempts=60  # 30 minutes with 30-second intervals
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            # Use the apiUrl from webhook response - no auth required by default
            status_response=$(curl -s -X GET "$api_url")
            
            pipeline_status=$(echo "$status_response" | jq -r '.status // .data.status')
            
            echo "Pipeline status: $pipeline_status (attempt $((attempt + 1))/$max_attempts)"
            
            case "$pipeline_status" in
              "SUCCESS"|"SUCCEEDED")
                echo "‚úÖ Pipeline completed successfully"
                echo "status=success" >> $GITHUB_OUTPUT
                break
                ;;
              "FAILED"|"FAILURE"|"ERROR")
                echo "‚ùå Pipeline failed"
                failure_reason=$(echo "$status_response" | jq -r '.data.failureInfo.message // .failureReason // "Pipeline execution failed"')
                echo "status=failed" >> $GITHUB_OUTPUT
                echo "failure_reason=$failure_reason" >> $GITHUB_OUTPUT
                break
                ;;
              "ABORTED"|"CANCELLED")
                echo "‚ö†Ô∏è Pipeline was aborted"
                echo "status=aborted" >> $GITHUB_OUTPUT
                echo "failure_reason=Pipeline execution was aborted or cancelled" >> $GITHUB_OUTPUT
                break
                ;;
              "RUNNING"|"QUEUED"|"PAUSED")
                echo "Pipeline still running, waiting..."
                sleep 30
                attempt=$((attempt + 1))
                ;;
              *)
                echo "Unknown status: $pipeline_status"
                sleep 30
                attempt=$((attempt + 1))
                ;;
            esac
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "‚ùå Pipeline monitoring timed out"
            echo "status=timeout" >> $GITHUB_OUTPUT
            echo "failure_reason=Pipeline monitoring timed out after 30 minutes" >> $GITHUB_OUTPUT
          fi

      # Rest of the steps remain the same...
      - name: Comment on PR - Pipeline Failed
        if: steps.monitor-pipeline.outputs.status == 'failed' || steps.monitor-pipeline.outputs.status == 'aborted' || steps.monitor-pipeline.outputs.status == 'timeout'
        run: |
          status_emoji="‚ùå"
          status_text="Failed"
          
          if [[ "${{ steps.monitor-pipeline.outputs.status }}" == "aborted" ]]; then
            status_emoji="‚ö†Ô∏è"
            status_text="Aborted"
          elif [[ "${{ steps.monitor-pipeline.outputs.status }}" == "timeout" ]]; then
            status_emoji="‚è∞"
            status_text="Timed Out"
          fi
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
            -d "{
              \"body\": \"$status_emoji **Harness Pipeline $status_text**\n\n**Migration:** \`${{ steps.migration-config.outputs.migration_type }}\`\n**Execution ID:** \`${{ steps.trigger-pipeline.outputs.execution_id }}\`\n**Failure Reason:** ${{ steps.monitor-pipeline.outputs.failure_reason }}\n\n‚ùó Please review the pipeline logs and fix the issues before retrying.\"
            }"

      - name: Comment on PR - Pipeline Success
        if: steps.monitor-pipeline.outputs.status == 'success'
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
            -d '{
              "body": "‚úÖ **Harness Pipeline Completed Successfully**\n\n**Migration:** `${{ steps.migration-config.outputs.migration_type }}`\n**Execution ID:** `${{ steps.trigger-pipeline.outputs.execution_id }}`\n\nüéâ All checks passed! Proceeding with automatic merge..."
            }'

      - name: Merge Pull Request
        if: steps.monitor-pipeline.outputs.status == 'success'
        run: |
          echo "üîÄ Automatically merging PR after successful pipeline execution"
          
          curl -X PUT \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}/merge \
            -d '{
              "commit_title": "Merge PR #${{ github.event.number }}: ${{ github.event.pull_request.title }}",
              "commit_message": "Automatically merged after successful Harness pipeline execution\n\nExecution ID: ${{ steps.trigger-pipeline.outputs.execution_id }}\nMigration: ${{ steps.migration-config.outputs.migration_type }}",
              "merge_method": "merge"
            }' || {
              echo "‚ùå Failed to merge PR automatically"
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/json" \
                https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
                -d '{
                  "body": "‚ö†Ô∏è **Auto-merge Failed**\n\nThe Harness pipeline completed successfully, but automatic merge failed. Please merge manually."
                }'
            }





